package TestingGrounds.GameSystem;


/**
* TestingGrounds/GameSystem/_GameServerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameSystem.idl
* Thursday, May 16, 2024 11:03:59 PM CST
*/

public class _GameServerStub extends org.omg.CORBA.portable.ObjectImpl implements TestingGrounds.GameSystem.GameServer
{

  public boolean login (String username, String password, org.omg.CORBA.StringHolder sessionToken, TestingGrounds.GameSystem.CallbackInterface cbi) throws TestingGrounds.GameSystem.InvalidCredentials, TestingGrounds.GameSystem.AlreadyLoggedIn
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                $out.write_string (username);
                $out.write_string (password);
                TestingGrounds.GameSystem.CallbackInterfaceHelper.write ($out, cbi);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                sessionToken.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/InvalidCredentials:1.0"))
                    throw TestingGrounds.GameSystem.InvalidCredentialsHelper.read ($in);
                else if (_id.equals ("IDL:TestingGrounds/GameSystem/AlreadyLoggedIn:1.0"))
                    throw TestingGrounds.GameSystem.AlreadyLoggedInHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return login (username, password, sessionToken, cbi        );
            } finally {
                _releaseReply ($in);
            }
  } // login

  public boolean logout (String sessionToken)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logout", true);
                $out.write_string (sessionToken);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return logout (sessionToken        );
            } finally {
                _releaseReply ($in);
            }
  } // logout

  public boolean adminLogin (String username, String password, org.omg.CORBA.StringHolder sessionToken, TestingGrounds.GameSystem.CallbackInterface cbi) throws TestingGrounds.GameSystem.InvalidCredentials, TestingGrounds.GameSystem.AlreadyLoggedIn
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("adminLogin", true);
                $out.write_string (username);
                $out.write_string (password);
                TestingGrounds.GameSystem.CallbackInterfaceHelper.write ($out, cbi);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                sessionToken.value = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/InvalidCredentials:1.0"))
                    throw TestingGrounds.GameSystem.InvalidCredentialsHelper.read ($in);
                else if (_id.equals ("IDL:TestingGrounds/GameSystem/AlreadyLoggedIn:1.0"))
                    throw TestingGrounds.GameSystem.AlreadyLoggedInHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return adminLogin (username, password, sessionToken, cbi        );
            } finally {
                _releaseReply ($in);
            }
  } // adminLogin

  public boolean adminLogout (String sessionToken)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("adminLogout", true);
                $out.write_string (sessionToken);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return adminLogout (sessionToken        );
            } finally {
                _releaseReply ($in);
            }
  } // adminLogout

  public String hostGame (String sessionToken, TestingGrounds.GameSystem.CallbackInterface cbi)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hostGame", true);
                $out.write_string (sessionToken);
                TestingGrounds.GameSystem.CallbackInterfaceHelper.write ($out, cbi);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hostGame (sessionToken, cbi        );
            } finally {
                _releaseReply ($in);
            }
  } // hostGame

  public String joinRandomGame (String sessionToken, TestingGrounds.GameSystem.CallbackInterface cbi) throws TestingGrounds.GameSystem.NoWaitingGames
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("joinRandomGame", true);
                $out.write_string (sessionToken);
                TestingGrounds.GameSystem.CallbackInterfaceHelper.write ($out, cbi);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/NoWaitingGames:1.0"))
                    throw TestingGrounds.GameSystem.NoWaitingGamesHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return joinRandomGame (sessionToken, cbi        );
            } finally {
                _releaseReply ($in);
            }
  } // joinRandomGame

  public String joinGame (String sessionToken, String gameId) throws TestingGrounds.GameSystem.InvalidGameCode, TestingGrounds.GameSystem.GameAlreadyActive
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("joinGame", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/InvalidGameCode:1.0"))
                    throw TestingGrounds.GameSystem.InvalidGameCodeHelper.read ($in);
                else if (_id.equals ("IDL:TestingGrounds/GameSystem/GameAlreadyActive:1.0"))
                    throw TestingGrounds.GameSystem.GameAlreadyActiveHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return joinGame (sessionToken, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // joinGame

  public boolean startGame (String sessionToken, String gameId) throws TestingGrounds.GameSystem.LobbyTimeExpired
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGame", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/LobbyTimeExpired:1.0"))
                    throw TestingGrounds.GameSystem.LobbyTimeExpiredHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return startGame (sessionToken, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // startGame

  public void submitWord (String sessionToken, String gameId, String word) throws TestingGrounds.GameSystem.InvalidWord
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("submitWord", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $out.write_string (word);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/InvalidWord:1.0"))
                    throw TestingGrounds.GameSystem.InvalidWordHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                submitWord (sessionToken, gameId, word        );
            } finally {
                _releaseReply ($in);
            }
  } // submitWord

  public void leaveGame (String sessionToken, String gameId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("leaveGame", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                leaveGame (sessionToken, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // leaveGame

  public void leaveLobby (String sessionToken, String gameId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("leaveLobby", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                leaveLobby (sessionToken, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // leaveLobby

  public String getLetters (String sessionToken, String gameId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLetters", true);
                $out.write_string (sessionToken);
                $out.write_string (gameId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLetters (sessionToken, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // getLetters

  public void backToHomeScreen (String sessionToken)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("backToHomeScreen", true);
                $out.write_string (sessionToken);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                backToHomeScreen (sessionToken        );
            } finally {
                _releaseReply ($in);
            }
  } // backToHomeScreen

  public void updateSecondsPerWaiting (int newSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateSecondsPerWaiting", true);
                $out.write_long (newSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateSecondsPerWaiting (newSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // updateSecondsPerWaiting

  public void editRoundTime (int newSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editRoundTime", true);
                $out.write_long (newSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                editRoundTime (newSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // editRoundTime

  public void editNumRounds (int newSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editNumRounds", true);
                $out.write_long (newSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                editNumRounds (newSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // editNumRounds

  public String[] viewPlayers (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewPlayers", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result[] = TestingGrounds.GameSystem.PlayerNameListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewPlayers (name        );
            } finally {
                _releaseReply ($in);
            }
  } // viewPlayers

  public boolean ping ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ping (        );
            } finally {
                _releaseReply ($in);
            }
  } // ping

  public boolean isServerConnected () throws TestingGrounds.GameSystem.lossConnection
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isServerConnected", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:TestingGrounds/GameSystem/lossConnection:1.0"))
                    throw TestingGrounds.GameSystem.lossConnectionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isServerConnected (        );
            } finally {
                _releaseReply ($in);
            }
  } // isServerConnected

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:TestingGrounds/GameSystem/GameServer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GameServerStub
