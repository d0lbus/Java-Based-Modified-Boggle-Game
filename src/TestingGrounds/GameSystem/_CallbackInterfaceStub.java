package TestingGrounds.GameSystem;


/**
* TestingGrounds/GameSystem/_CallbackInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameSystem.idl
* Thursday, May 16, 2024 11:03:58 PM CST
*/

public class _CallbackInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements TestingGrounds.GameSystem.CallbackInterface
{

  public void CreateLobGUI (String username, String gameId)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("CreateLobGUI", true);
                $out.write_string (username);
                $out.write_string (gameId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                CreateLobGUI (username, gameId        );
            } finally {
                _releaseReply ($in);
            }
  } // CreateLobGUI

  public void UpdateLobGUI (TestingGrounds.GameSystem.PlayerInfo[] playerData, String gameToken)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("UpdateLobGUI", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                $out.write_string (gameToken);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                UpdateLobGUI (playerData, gameToken        );
            } finally {
                _releaseReply ($in);
            }
  } // UpdateLobGUI

  public void startGameGUI (TestingGrounds.GameSystem.PlayerInfo[] playerData, char[] charArrayList)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGameGUI", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                TestingGrounds.GameSystem.CharListHelper.write ($out, charArrayList);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startGameGUI (playerData, charArrayList        );
            } finally {
                _releaseReply ($in);
            }
  } // startGameGUI

  public void updatePlayerReadyStatus (TestingGrounds.GameSystem.PlayerInfo[] playerData, boolean[] readyStatus)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updatePlayerReadyStatus", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                TestingGrounds.GameSystem.ReadyStatusListHelper.write ($out, readyStatus);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updatePlayerReadyStatus (playerData, readyStatus        );
            } finally {
                _releaseReply ($in);
            }
  } // updatePlayerReadyStatus

  public void startLobbyTimer (int durationSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startLobbyTimer", true);
                $out.write_long (durationSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startLobbyTimer (durationSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // startLobbyTimer

  public void startRoundTimer (int durationSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startRoundTimer", true);
                $out.write_long (durationSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startRoundTimer (durationSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // startRoundTimer

  public void broadcastGuessedWord (TestingGrounds.GameSystem.PlayerInfo[] playerData, String word, String username)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("broadcastGuessedWord", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                $out.write_string (word);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                broadcastGuessedWord (playerData, word, username        );
            } finally {
                _releaseReply ($in);
            }
  } // broadcastGuessedWord

  public void displayRoundWinner (TestingGrounds.GameSystem.PlayerInfo[] playerData, String winnerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("displayRoundWinner", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                $out.write_string (winnerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                displayRoundWinner (playerData, winnerName        );
            } finally {
                _releaseReply ($in);
            }
  } // displayRoundWinner

  public void displayOverallWinner (TestingGrounds.GameSystem.PlayerInfo[] playerData, String winnerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("displayOverallWinner", true);
                TestingGrounds.GameSystem.PlayerInfoListHelper.write ($out, playerData);
                $out.write_string (winnerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                displayOverallWinner (playerData, winnerName        );
            } finally {
                _releaseReply ($in);
            }
  } // displayOverallWinner

  public void updateLeaderBoardGUI (TestingGrounds.GameSystem.Users[] playerData)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateLeaderBoardGUI", true);
                TestingGrounds.GameSystem.TopFiveUsersHelper.write ($out, playerData);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateLeaderBoardGUI (playerData        );
            } finally {
                _releaseReply ($in);
            }
  } // updateLeaderBoardGUI

  public void displayTie ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("displayTie", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                displayTie (        );
            } finally {
                _releaseReply ($in);
            }
  } // displayTie

  public void ReadyStateException ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ReadyStateException", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ReadyStateException (        );
            } finally {
                _releaseReply ($in);
            }
  } // ReadyStateException

  public void wordHasBeenGuessed (String word)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("wordHasBeenGuessed", true);
                $out.write_string (word);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                wordHasBeenGuessed (word        );
            } finally {
                _releaseReply ($in);
            }
  } // wordHasBeenGuessed

  public void wordIsValid (String word)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("wordIsValid", true);
                $out.write_string (word);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                wordIsValid (word        );
            } finally {
                _releaseReply ($in);
            }
  } // wordIsValid

  public void wordIsInvalid (String word)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("wordIsInvalid", true);
                $out.write_string (word);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                wordIsInvalid (word        );
            } finally {
                _releaseReply ($in);
            }
  } // wordIsInvalid

  public void startRoundDelayTimer (int delaySeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startRoundDelayTimer", true);
                $out.write_long (delaySeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startRoundDelayTimer (delaySeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // startRoundDelayTimer

  public void updateWaitingTimeLabel (int newSeconds)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateWaitingTimeLabel", true);
                $out.write_long (newSeconds);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateWaitingTimeLabel (newSeconds        );
            } finally {
                _releaseReply ($in);
            }
  } // updateWaitingTimeLabel

  public void updateGameSessions (TestingGrounds.GameSystem.Lobbies[] sessions)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateGameSessions", true);
                TestingGrounds.GameSystem.GameSessionListHelper.write ($out, sessions);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateGameSessions (sessions        );
            } finally {
                _releaseReply ($in);
            }
  } // updateGameSessions

  public void updateAccountsList (TestingGrounds.GameSystem.Users[] playerData)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateAccountsList", true);
                TestingGrounds.GameSystem.TopFiveUsersHelper.write ($out, playerData);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateAccountsList (playerData        );
            } finally {
                _releaseReply ($in);
            }
  } // updateAccountsList

  public void showHomeScreen ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("showHomeScreen", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                showHomeScreen (        );
            } finally {
                _releaseReply ($in);
            }
  } // showHomeScreen

  public void broadcastDisconnection (String username)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("broadcastDisconnection", true);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                broadcastDisconnection (username        );
            } finally {
                _releaseReply ($in);
            }
  } // broadcastDisconnection

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:TestingGrounds/GameSystem/CallbackInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _CallbackInterfaceStub
