package TestingGrounds.GameSystem;


/**
* TestingGrounds/GameSystem/CallbackInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameSystem.idl
* Thursday, May 16, 2024 11:37:48 AM SGT
*/

public abstract class CallbackInterfacePOA extends org.omg.PortableServer.Servant
 implements TestingGrounds.GameSystem.CallbackInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("CreateLobGUI", new java.lang.Integer (0));
    _methods.put ("UpdateLobGUI", new java.lang.Integer (1));
    _methods.put ("startGameGUI", new java.lang.Integer (2));
    _methods.put ("updatePlayerReadyStatus", new java.lang.Integer (3));
    _methods.put ("startLobbyTimer", new java.lang.Integer (4));
    _methods.put ("startRoundTimer", new java.lang.Integer (5));
    _methods.put ("broadcastGuessedWord", new java.lang.Integer (6));
    _methods.put ("displayRoundWinner", new java.lang.Integer (7));
    _methods.put ("displayOverallWinner", new java.lang.Integer (8));
    _methods.put ("updateLeaderBoardGUI", new java.lang.Integer (9));
    _methods.put ("displayTie", new java.lang.Integer (10));
    _methods.put ("ReadyStateException", new java.lang.Integer (11));
    _methods.put ("wordHasBeenGuessed", new java.lang.Integer (12));
    _methods.put ("wordIsValid", new java.lang.Integer (13));
    _methods.put ("wordIsInvalid", new java.lang.Integer (14));
    _methods.put ("startRoundDelayTimer", new java.lang.Integer (15));
    _methods.put ("updateWaitingTimeLabel", new java.lang.Integer (16));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // TestingGrounds/GameSystem/CallbackInterface/CreateLobGUI
       {
         String username = in.read_string ();
         String gameId = in.read_string ();
         this.CreateLobGUI (username, gameId);
         out = $rh.createReply();
         break;
       }

       case 1:  // TestingGrounds/GameSystem/CallbackInterface/UpdateLobGUI
       {
         TestingGrounds.GameSystem.PlayerInfo playerData[] = TestingGrounds.GameSystem.PlayerInfoListHelper.read (in);
         String gameToken = in.read_string ();
         this.UpdateLobGUI (playerData, gameToken);
         out = $rh.createReply();
         break;
       }

       case 2:  // TestingGrounds/GameSystem/CallbackInterface/startGameGUI
       {
         TestingGrounds.GameSystem.PlayerInfo playerData[] = TestingGrounds.GameSystem.PlayerInfoListHelper.read (in);
         char charArrayList[] = TestingGrounds.GameSystem.CharListHelper.read (in);
         this.startGameGUI (playerData, charArrayList);
         out = $rh.createReply();
         break;
       }

       case 3:  // TestingGrounds/GameSystem/CallbackInterface/updatePlayerReadyStatus
       {
         TestingGrounds.GameSystem.PlayerInfo playerData[] = TestingGrounds.GameSystem.PlayerInfoListHelper.read (in);
         boolean readyStatus[] = TestingGrounds.GameSystem.ReadyStatusListHelper.read (in);
         this.updatePlayerReadyStatus (playerData, readyStatus);
         out = $rh.createReply();
         break;
       }

       case 4:  // TestingGrounds/GameSystem/CallbackInterface/startLobbyTimer
       {
         int durationSeconds = in.read_long ();
         this.startLobbyTimer (durationSeconds);
         out = $rh.createReply();
         break;
       }

       case 5:  // TestingGrounds/GameSystem/CallbackInterface/startRoundTimer
       {
         int durationSeconds = in.read_long ();
         this.startRoundTimer (durationSeconds);
         out = $rh.createReply();
         break;
       }

       case 6:  // TestingGrounds/GameSystem/CallbackInterface/broadcastGuessedWord
       {
         TestingGrounds.GameSystem.PlayerInfo playerData[] = TestingGrounds.GameSystem.PlayerInfoListHelper.read (in);
         String word = in.read_string ();
         String username = in.read_string ();
         this.broadcastGuessedWord (playerData, word, username);
         out = $rh.createReply();
         break;
       }

       case 7:  // TestingGrounds/GameSystem/CallbackInterface/displayRoundWinner
       {
         TestingGrounds.GameSystem.PlayerInfo playerData[] = TestingGrounds.GameSystem.PlayerInfoListHelper.read (in);
         String winnerName = in.read_string ();
         this.displayRoundWinner (playerData, winnerName);
         out = $rh.createReply();
         break;
       }

       case 8:  // TestingGrounds/GameSystem/CallbackInterface/displayOverallWinner
       {
         String winnerName = in.read_string ();
         this.displayOverallWinner (winnerName);
         out = $rh.createReply();
         break;
       }

       case 9:  // TestingGrounds/GameSystem/CallbackInterface/updateLeaderBoardGUI
       {
         TestingGrounds.GameSystem.Users playerData[] = TestingGrounds.GameSystem.TopFiveUsersHelper.read (in);
         this.updateLeaderBoardGUI (playerData);
         out = $rh.createReply();
         break;
       }

       case 10:  // TestingGrounds/GameSystem/CallbackInterface/displayTie
       {
         this.displayTie ();
         out = $rh.createReply();
         break;
       }

       case 11:  // TestingGrounds/GameSystem/CallbackInterface/ReadyStateException
       {
         this.ReadyStateException ();
         out = $rh.createReply();
         break;
       }

       case 12:  // TestingGrounds/GameSystem/CallbackInterface/wordHasBeenGuessed
       {
         String word = in.read_string ();
         this.wordHasBeenGuessed (word);
         out = $rh.createReply();
         break;
       }

       case 13:  // TestingGrounds/GameSystem/CallbackInterface/wordIsValid
       {
         String word = in.read_string ();
         this.wordIsValid (word);
         out = $rh.createReply();
         break;
       }

       case 14:  // TestingGrounds/GameSystem/CallbackInterface/wordIsInvalid
       {
         String word = in.read_string ();
         this.wordIsInvalid (word);
         out = $rh.createReply();
         break;
       }

       case 15:  // TestingGrounds/GameSystem/CallbackInterface/startRoundDelayTimer
       {
         int delaySeconds = in.read_long ();
         this.startRoundDelayTimer (delaySeconds);
         out = $rh.createReply();
         break;
       }

       case 16:  // TestingGrounds/GameSystem/CallbackInterface/updateWaitingTimeLabel
       {
         int newSeconds = in.read_long ();
         this.updateWaitingTimeLabel (newSeconds);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:TestingGrounds/GameSystem/CallbackInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CallbackInterface _this() 
  {
    return CallbackInterfaceHelper.narrow(
    super._this_object());
  }

  public CallbackInterface _this(org.omg.CORBA.ORB orb) 
  {
    return CallbackInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class CallbackInterfacePOA
