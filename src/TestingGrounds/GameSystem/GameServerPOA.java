package TestingGrounds.GameSystem;


import java.sql.SQLException;

/**
* TestingGrounds/GameSystem/GameServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameSystem.idl
* Thursday, May 16, 2024 11:37:48 AM SGT
*/

public abstract class GameServerPOA extends org.omg.PortableServer.Servant
 implements TestingGrounds.GameSystem.GameServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("logout", new java.lang.Integer (1));
    _methods.put ("hostGame", new java.lang.Integer (2));
    _methods.put ("joinRandomGame", new java.lang.Integer (3));
    _methods.put ("joinGame", new java.lang.Integer (4));
    _methods.put ("startGame", new java.lang.Integer (5));
    _methods.put ("submitWord", new java.lang.Integer (6));
    _methods.put ("getLetters", new java.lang.Integer (7));
    _methods.put ("updateSecondsPerWaiting", new java.lang.Integer (8));
    _methods.put ("ping", new java.lang.Integer (9));
    _methods.put ("isServerConnected", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // TestingGrounds/GameSystem/GameServer/login
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           org.omg.CORBA.StringHolder sessionToken = new org.omg.CORBA.StringHolder ();
           TestingGrounds.GameSystem.CallbackInterface cbi = TestingGrounds.GameSystem.CallbackInterfaceHelper.read (in);
           boolean $result = false;
           $result = this.login (username, password, sessionToken, cbi);
           out = $rh.createReply();
           out.write_boolean ($result);
           out.write_string (sessionToken.value);
         } catch (TestingGrounds.GameSystem.InvalidCredentials $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.InvalidCredentialsHelper.write (out, $ex);
         } catch (TestingGrounds.GameSystem.AlreadyLoggedIn $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.AlreadyLoggedInHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // TestingGrounds/GameSystem/GameServer/logout
       {
         String sessionToken = in.read_string ();
         boolean $result = false;
         $result = this.logout (sessionToken);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // TestingGrounds/GameSystem/GameServer/hostGame
       {
         String sessionToken = in.read_string ();
         TestingGrounds.GameSystem.CallbackInterface cbi = TestingGrounds.GameSystem.CallbackInterfaceHelper.read (in);
         String $result = null;
           try {
               $result = this.hostGame (sessionToken, cbi);
           } catch (SQLException e) {
               throw new RuntimeException(e);
           }
           out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // TestingGrounds/GameSystem/GameServer/joinRandomGame
       {
         try {
           String sessionToken = in.read_string ();
           TestingGrounds.GameSystem.CallbackInterface cbi = TestingGrounds.GameSystem.CallbackInterfaceHelper.read (in);
           String $result = null;
             try {
                 $result = this.joinRandomGame (sessionToken, cbi);
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
             out = $rh.createReply();
           out.write_string ($result);
         } catch (TestingGrounds.GameSystem.NoWaitingGames $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.NoWaitingGamesHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // TestingGrounds/GameSystem/GameServer/joinGame
       {
         try {
           String sessionToken = in.read_string ();
           String gameId = in.read_string ();
           String $result = null;
             try {
                 $result = this.joinGame (sessionToken, gameId);
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
             out = $rh.createReply();
           out.write_string ($result);
         } catch (TestingGrounds.GameSystem.InvalidGameCode $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.InvalidGameCodeHelper.write (out, $ex);
         } catch (TestingGrounds.GameSystem.GameAlreadyActive $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.GameAlreadyActiveHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // TestingGrounds/GameSystem/GameServer/startGame
       {
         try {
           String sessionToken = in.read_string ();
           String gameId = in.read_string ();
           boolean $result = false;
             try {
                 $result = this.startGame (sessionToken, gameId);
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
             out = $rh.createReply();
           out.write_boolean ($result);
         } catch (TestingGrounds.GameSystem.LobbyTimeExpired $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.LobbyTimeExpiredHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // TestingGrounds/GameSystem/GameServer/submitWord
       {
         try {
           String sessionToken = in.read_string ();
           String gameId = in.read_string ();
           String word = in.read_string ();
             try {
                 this.submitWord (sessionToken, gameId, word);
             } catch (SQLException e) {
                 throw new RuntimeException(e);
             }
             out = $rh.createReply();
         } catch (TestingGrounds.GameSystem.InvalidWord $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.InvalidWordHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // TestingGrounds/GameSystem/GameServer/getLetters
       {
         String sessionToken = in.read_string ();
         String gameId = in.read_string ();
         String $result = null;
         $result = this.getLetters (sessionToken, gameId);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // TestingGrounds/GameSystem/GameServer/updateSecondsPerWaiting
       {
         int newSeconds = in.read_long ();
         this.updateSecondsPerWaiting (newSeconds);
         out = $rh.createReply();
         break;
       }

       case 9:  // TestingGrounds/GameSystem/GameServer/ping
       {
         boolean $result = false;
         $result = this.ping ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // TestingGrounds/GameSystem/GameServer/isServerConnected
       {
         try {
           boolean $result = false;
           $result = this.isServerConnected ();
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (TestingGrounds.GameSystem.lossConnection $ex) {
           out = $rh.createExceptionReply ();
           TestingGrounds.GameSystem.lossConnectionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:TestingGrounds/GameSystem/GameServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameServer _this() 
  {
    return GameServerHelper.narrow(
    super._this_object());
  }

  public GameServer _this(org.omg.CORBA.ORB orb) 
  {
    return GameServerHelper.narrow(
    super._this_object(orb));
  }


} // class GameServerPOA
